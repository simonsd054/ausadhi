# Copyright 2020 Google, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Deploy to Google Compute Engine

on:
  push:
    branches:
    - 'main'
    - 'gce-check'

env:
  PROJECT_ID: ausadhi
  GCE_INSTANCE: ausadhi-vm  # TODO: update to instance name
  GCE_INSTANCE_ZONE: us-east1-b   # TODO: update to instance zone
  GAR_NAME: ausadhi-gar
  GAR_LOCATION: us-east1 # TODO: update Artifact Registry location

jobs:
  setup-build-publish-deploy:
    environment: production
    
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    # - id: 'auth'
    #   name: 'Authenticate to Google Cloud'
    #   uses: 'google-github-actions/auth@v2'
    #   with:
    #     workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #     service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # Setup gcloud CLI
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - name: Docker Auth
      run: |-
        gcloud auth configure-docker "${{ env.GAR_LOCATION }}-docker.pkg.dev"

    # Build the Docker image
    - name: Build
      run: |-
        docker build --build-arg VITE_API_ENDPOINT=${{ secrets.VITE_API_ENDPOINT }} -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.GCE_INSTANCE }}:${{ github.sha }}" ./

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.GCE_INSTANCE }}:${{ github.sha }}"

    # Add pruning and IP address update to VM startup script
    - name: Update startup script to prune and update IP address
      run: |-
        gcloud compute instances add-metadata "${{ env.GCE_INSTANCE }}" \
          --zone "${{ env.GCE_INSTANCE_ZONE }}" \
          --metadata=startup-script="#! /bin/bash
            docker image prune -af
            export MONGO_URI='${{ secrets.MONGO_URI }}'
            export JWT_SECRET='${{ secrets.JWT_SECRET }}'"

    - name: Deploy
      run: |-
        gcloud compute instances update-container "${{ env.GCE_INSTANCE }}" \
          --zone "${{ env.GCE_INSTANCE_ZONE }}" \
          --container-image "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.GCE_INSTANCE }}:${{ github.sha }}"

    # Purge old images from GCR (not latest)
    - name: Purge GCR images
      run: |-
        gcloud container images list-tags "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.GCE_INSTANCE }}" \
          --format="get(digest)" --filter="NOT tags=${{ github.sha }}" | \
          awk -v image_path="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.GCE_INSTANCE }}@" '{print image_path $1}' | \
          xargs -r gcloud container images delete --force-delete-tags --quiet
